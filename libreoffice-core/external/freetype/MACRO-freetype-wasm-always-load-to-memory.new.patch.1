diff -ur freetype.org/src/base/ftsystem.c freetype/src/base/ftsystem.c
--- freetype.org/src/base/ftsystem.c	2024-03-07 20:56:47.945955479 +0800
+++ freetype/src/base/ftsystem.c	2024-03-07 21:03:03.509771687 +0800
@@ -33,6 +33,10 @@
 #include <freetype/ftsystem.h>
 #include <freetype/fterrors.h>
 #include <freetype/fttypes.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <unistd.h>
+#include <fcntl.h>
 
 
   /**************************************************************************
@@ -184,6 +188,17 @@
     stream->base               = NULL;
   }
 
+  FT_CALLBACK_DEF( void )
+  ft_memory_stream_close( FT_Stream  stream )
+  {
+    if (stream->base)
+    free(stream->base);
+
+    stream->descriptor.pointer = NULL;
+    stream->size               = 0;
+    stream->base               = NULL;
+  }
+
 
   /**************************************************************************
    *
@@ -238,10 +253,9 @@
   FT_Stream_Open( FT_Stream    stream,
                   const char*  filepathname )
   {
-    FT_FILE*  file;
     int nFD;
     int n;
-
+    struct stat	    statbuf;
 
     if ( !stream )
       return FT_THROW( Invalid_Stream_Handle );
@@ -256,32 +270,44 @@
     if ( sscanf( filepathname, "/:FD:/%d%n", &nFD, &n ) == 1 && filepathname[n] == '\0')
     {
       lseek( nFD, 0, SEEK_SET );
-      file = fdopen( dup( nFD ), "rb" );
+      nFD = dup( nFD );
     }
     else
-      file = ft_fopen( filepathname, "rb" );
-    if ( !file )
-    {
+      nFD = open( (char *)filepathname, O_RDONLY );
+
+    if (nFD < 0 || fstat(nFD, &statbuf) < 0) {
       FT_ERROR(( "FT_Stream_Open:"
                  " could not open `%s'\n", filepathname ));
 
       return FT_THROW( Cannot_Open_Resource );
     }
-
-    ft_fseek( file, 0, SEEK_END );
-    stream->size = (unsigned long)ft_ftell( file );
-    if ( !stream->size )
+    stream->size = (unsigned long)statbuf.st_size;
+    if (!stream->size)
     {
       FT_ERROR(( "FT_Stream_Open:" ));
       FT_ERROR(( " opened `%s' but zero-sized\n", filepathname ));
-      ft_fclose( file );
+      close(nFD);
       return FT_THROW( Cannot_Open_Stream );
     }
-    ft_fseek( file, 0, SEEK_SET );
-
-    stream->descriptor.pointer = file;
-    stream->read  = ft_ansi_stream_io;
-    stream->close = ft_ansi_stream_close;
+    stream->base = (unsigned char *)malloc(stream->size);
+    if (!stream->base)
+    {
+      FT_ERROR(( "FT_Stream_Open:" ));
+      FT_ERROR(( " opened `%s' but cannot malloc\n", filepathname ));
+      close(nFD);
+      return FT_THROW( Cannot_Open_Stream );
+    }
+    if (read(nFD, stream->base, stream->size) != stream->size)
+    {
+      FT_ERROR(( "FT_Stream_Open:" ));
+      FT_ERROR(( " opened `%s' but bad read\n", filepathname ));
+      close(nFD);
+      free(stream->base);
+      stream->base = NULL;
+      return FT_THROW( Cannot_Open_Stream );
+    }
+    // stream->descriptor.pointer = file;
+    stream->close = ft_memory_stream_close;
 
     FT_TRACE1(( "FT_Stream_Open:" ));
     FT_TRACE1(( " opened `%s' (%ld bytes) successfully\n",
